"""
============================
Author:小白31
Time:2020/7/26 20:07
E-mail:1359239107@qq.com
============================
"""
'''
类：
方法(类里面的函数):
1. 实例方法：self
    创建对象调用
2. 类方法：@classmethod
    可以通过类去调用，也可以通过对象去调用
    类方法里面既不会使用到对象属性，也不会调用对象的方法
3. 静态方法：@staticmethod
    应用场景：不会调用类、对象里面的属性方法的时候使用
    
怎么判断用哪个好？
1. 先全部定义为实例方法
2. 在判断 是否有方法不需要调用类属性、对象方法的 可以改为静态方法
'''
"""
类属性：
    公有属性：
    私有属性:__开头 或者_开头的叫私有属性，不能再类外部使用，只能在类里面使用

私有方法：
    __开头 或者_开头
"""


class MyTest:
    attr = 10
    _attr1 = 20     # 在外部可以访问，但是不要在内外部使用
    __attr2 = 88    # 强制拒绝外部访问


m = MyTest()
print(m.attr)
# print(m._attr1) # 在外部可以访问，但是不要在内外部使用
# print(m.__attr2) # AttributeError: 'MyTest' object has no attribute '__attr2'

'''
继承：
子类通过继承能够拥有父类的属性和方法（__开头的私有属性和方法除外）

重写父类方法：在子类中定义一个和父类同名的方法

在子类的方法中调用被重新过的父类方法：
     方式一：父类名.方法名(self)
     # 方式二：super().base_func()

# 父类是不能使用子类的方法和属性的
应用场景：
    父类中原有的方法不能满足当前的需求，需要对父类中的方法进行扩展

'''

'''
属性的动态设置：

# 动态设置属性
setattr(obj,属性名,属性值)：在代码执行的过程中给 类/对象 设置属性（属性不存在就是添加，存在就是修改）

getattr(obj,属性名,默认值):在代码执行的过程中获取 类/对象 属性

delattr(obj,属性名) :在代码执行的过程中删除 类/对象 属性

__dict__:获取所有的属性
'''